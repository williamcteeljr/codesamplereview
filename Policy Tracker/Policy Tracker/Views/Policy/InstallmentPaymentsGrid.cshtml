@model List<PolicyTracker.DomainModel.Policy.RiskPayment>

@Html.DevExpress().GridView(
    settings => {
        settings.Name = "InstallmentPayments";
        settings.KeyFieldName = "PaymentId";
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.Height = System.Web.UI.WebControls.Unit.Pixel(200);
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
        settings.Settings.VerticalScrollableHeight = 200;
        settings.CallbackRouteValues = new { Controller = "Policy", Action = "InstallmentPaymentsGrid", riskId = (int)ViewBag.RiskId };
        settings.SettingsEditing.BatchUpdateRouteValues = new { Controller = "Policy", Action = "BatchInstallmentPayments", riskId = (int)ViewBag.RiskId };

        settings.ClientSideEvents.EndCallback = @"
            function(s, e) {
                $.get( '/policytracker/policy/RiskInstallmentContent/" + (int)ViewBag.RiskId + @"', function(data) {
                    console.log(data);
                    $('#RiskInstallmentContent').html(data);   
                })
                .done(function() {})
                .fail(function() { alert('Error fetching updated installment information. Please close and reopen this risk to see updated installment information.')})
            }";

        settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
        settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Cell;
        settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.Click;

        settings.SettingsCommandButton.CancelButton.ButtonType = GridCommandButtonRenderMode.Button;
        settings.SettingsCommandButton.UpdateButton.ButtonType = GridCommandButtonRenderMode.Button;
        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.ButtonType = GridCommandButtonRenderMode.Button;
        settings.CommandColumn.Width = 70;
        
        settings.Columns.Add(column => {
            column.FieldName = "PaymentId";
            column.Visible = false;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "RiskId";
            column.Visible = false;
        });
        
        settings.Columns.Add(column => {
            column.FieldName = "DueDate";
            column.Caption = "Due Date";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            var deSettings = column.PropertiesEdit as DateEditProperties;
            deSettings.EditFormat = EditFormat.Custom;
            deSettings.EditFormatString = "M/dd/yyyy";
            deSettings.DisplayFormatString = "M/dd/yyyy";
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "InvoicedDate";
            column.Caption = "Invoiced Date";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            var deSettings = column.PropertiesEdit as DateEditProperties;
            deSettings.EditFormat = EditFormat.Custom;
            deSettings.EditFormatString = "M/dd/yyyy";
            deSettings.DisplayFormatString = "M/dd/yyyy";
        });
        
        settings.Columns.Add(column => {
            column.FieldName = "AnticipatedAmount";
            column.Caption = "$ Anticipated";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            var tbSettings = column.PropertiesEdit as TextBoxProperties;
            tbSettings.MaskSettings.AllowMouseWheel = false;
            tbSettings.MaskSettings.Mask = "<0..999999999g>";
            tbSettings.MaskSettings.IncludeLiterals = MaskIncludeLiteralsMode.DecimalSymbol;
            tbSettings.DisplayFormatString = "C0";
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "ActualAmount";
            column.Caption = "$ Actual";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            var tbSettings = column.PropertiesEdit as TextBoxProperties;
            tbSettings.MaskSettings.AllowMouseWheel = false;
            tbSettings.MaskSettings.Mask = "<0..999999999g>";
            tbSettings.MaskSettings.IncludeLiterals = MaskIncludeLiteralsMode.DecimalSymbol;
            tbSettings.DisplayFormatString = "C0";
        });

        settings.Columns.Add(column =>
        {
            column.Name = "ReportReceived";
            column.FieldName = "ReportReceived";
            column.Caption = "Report Rec.";
            //column.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
            //column.EditCellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center; 
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            var deSettings = column.PropertiesEdit as DateEditProperties;
            deSettings.EditFormat = EditFormat.Custom;
            deSettings.EditFormatString = "M/dd/yyyy";
            deSettings.DisplayFormatString = "M/dd/yyyy";
        });

        settings.InitNewRow = (sender, e) =>
        {
            e.NewValues["ActualAmount"] = 0;
            e.NewValues["AnticipatedAmount"] = 0;
            e.NewValues["ReportReceived"] = null;
        };
    }).Bind(Model).GetHtml()