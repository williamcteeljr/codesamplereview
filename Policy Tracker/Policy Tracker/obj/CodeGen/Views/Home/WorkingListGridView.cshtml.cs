#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    
    #line 1 "..\..\Views\Home\WorkingListGridView.cshtml"
    using System.Linq;
    
    #line default
    #line hidden
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Optimization;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using DevExpress.Data.PivotGrid;
    using DevExpress.Utils;
    using DevExpress.Web;
    using DevExpress.Web.ASPxHtmlEditor;
    using DevExpress.Web.ASPxPivotGrid;
    using DevExpress.Web.ASPxRichEdit;
    using DevExpress.Web.ASPxScheduler;
    using DevExpress.Web.ASPxSpellChecker;
    using DevExpress.Web.ASPxSpreadsheet;
    using DevExpress.Web.ASPxThemes;
    using DevExpress.Web.Mvc;
    using DevExpress.Web.Mvc.UI;
    using DevExpress.XtraCharts;
    using DevExpress.XtraCharts.Web;
    using DevExpress.XtraPivotGrid;
    using DevExpress.XtraReports;
    using DevExpress.XtraReports.UI;
    using DevExpress.XtraReports.Web;
    using DevExpress.XtraReports.Web.DocumentViewer;
    using DevExpress.XtraRichEdit;
    using DevExpress.XtraScheduler;
    using DevExpress.XtraScheduler.Native;
    using PolicyTracker.BusinessServices;
    using PolicyTracker.BusinessServices.Security;
    using PolicyTracker.HtmlHelpers;
    using PolicyTracker.Utilities;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Home/WorkingListGridView.cshtml")]
    public partial class _Views_Home_WorkingListGridView_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {
        public _Views_Home_WorkingListGridView_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n");

            
            #line 3 "..\..\Views\Home\WorkingListGridView.cshtml"
Write(Html.DevExpress().GridView(
    settings =>
    {
        settings.Name = "WorkingListGrid";
        settings.KeyFieldName = "RiskId";
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        //settings.Height = System.Web.UI.WebControls.Unit.Pixel(100);
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
        //settings.Settings.VerticalScrollableHeight = 100;
        settings.SettingsPager.ShowSeparators = true;
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new[] { "20", "50", "100" };
        settings.SettingsPager.AlwaysShowPager = true;
        settings.SettingsPager.PageSize = 100;
        settings.Styles.Cell.Wrap = DefaultBoolean.False;

        settings.CallbackRouteValues = new { Controller = "WorkingListGrid", Action = "WorkingListGrid" };
        settings.CustomBindingRouteValuesCollection.Add(GridViewOperationType.Paging, new { Controller = "WorkingListGrid", Action = "Page" });
        settings.CustomBindingRouteValuesCollection.Add(GridViewOperationType.Sorting, new { Controller = "WorkingListGrid", Action = "Sort" });
        settings.CustomBindingRouteValuesCollection.Add(GridViewOperationType.Filtering, new { Controller = "WorkingListGrid", Action = "Filter" });

        //settings.CustomActionRouteValues = new { Action = "", Controller = "WorkingListGrid" };

        settings.Styles.AlternatingRow.Enabled = DefaultBoolean.True;
        settings.Styles.AlternatingRow.BackColor = System.Drawing.Color.LightGray;
        //settings.Styles.Row.BackColor = System.Drawing.Color.SeaShell;

        // Disabling the right click context menu for now (Per Gary Churchill 2/18/2016)
        settings.SettingsContextMenu.Enabled = true;
        settings.SettingsContextMenu.EnableFooterMenu = DefaultBoolean.False;
        settings.SettingsContextMenu.EnableGroupPanelMenu = DefaultBoolean.False;
        settings.SettingsContextMenu.EnableColumnMenu = DefaultBoolean.False;

        settings.SettingsContextMenu.RowMenuItemVisibility.DeleteRow = false;
        settings.SettingsContextMenu.RowMenuItemVisibility.NewRow = false;
        settings.SettingsContextMenu.RowMenuItemVisibility.EditRow = false;

        settings.FillContextMenuItems = (s, e) =>
        {
            if (e.MenuType == GridViewContextMenuType.Rows)
            {
                e.Items.Add("Assign to Underwriter/Assistant", "QuickAssign");
            }
        };

        settings.ClientSideEvents.ContextMenuItemClick = "WLQuickAssign";

        //settings.HtmlDataCellPrepared = (sender, e) =>
        //{
        //    if (e.DataColumn.FieldName == "ProductLine")
        //    {
        //        if (e.CellValue != null && e.CellValue.ToString() == "Commercial")
        //        {
        //            e.Cell.BackColor = System.Drawing.Color.Green;
        //        }
        //    }
        //};

        settings.CustomJSProperties = (sender, e) =>
        {
            e.Properties["cpFilterExpression"] = (sender as MVCxGridView).FilterExpression;
        };

        settings.ClientSideEvents.Init = "orAero.workingList.initalize";
        settings.ClientSideEvents.RowDblClick = "orAero.workingList.onDoubleClickRow";
        settings.ClientSideEvents.FocusedRowChanged = "orAero.workingList.onFocusedRowChanged";
        settings.ClientSideEvents.EndCallback = "orAero.workingList.onFocusedRowChanged";
        //settings.ClientSideEvents.BeginCallback = "function(s,e) { command = e.command; }";
        //settings.ClientSideEvents.EndCallback = "function(s, e) { console.log(command); if (command == 'REFRESH') { console.log('unselect'); s.UnselectRows();} }";


        settings.Settings.ShowFilterRow = true;
        //settings.Settings.ShowFooter = true;
        settings.SettingsBehavior.AllowFocusedRow = true;

        settings.AutoFilterCellEditorInitialize = (s, e) =>
        {
            //if (e.Editor is ASPxComboBox)
            //{
            //    ASPxComboBox comboBox = e.Editor as ASPxComboBox;
            //    EditButton clearButton = new EditButton("[X]")
            //    {
            //        ToolTip = "*Clear Filter*"
            //    };
            //    comboBox.Buttons.Add(clearButton);
            //    comboBox.ClientSideEvents.ButtonClick = String.Format("function(s, e) {{ {0}.AutoFilterByColumn('{1}', null); }}", "WorkingListGrid", e.Column.FieldName);
            //}

            if (e.Column.FieldName == "IsRenewal" || e.Column.FieldName == "HasNotes")
            {
                ASPxComboBox checkBox = e.Editor as ASPxComboBox;
                checkBox.Items.Clear();
                checkBox.Items.Add("Yes", true);
                checkBox.Items.Add("No", false);
                checkBox.Items.Add("", "");
            }
        };

        settings.HtmlDataCellPrepared = (s, e) =>
        {
            if (e.DataColumn.FieldName == "HasNotes")
            {
                ASPxGridView grid = (ASPxGridView)s;
                var comment = grid.GetRowValues(e.VisibleIndex, new[] { "Comment" });
                e.Cell.ToolTip = comment != null ? comment.ToString() : "";
            }
        };

        var defaultConfig = PolicyTracker.Controllers.WorkingListGridController._DEFAULT_SETUP;
        List<string> gridConfig = new List<string>();
        string configName = ViewBag.ConfigName;

        if (!String.IsNullOrEmpty(configName))
        {
            var userConfig = ServiceLocator.WorkingListGridSvc.GetUserGridConfiguration(ViewBag.ConfigName);
            gridConfig.AddRange(userConfig.GridColumns);
        }
        else
        {
            gridConfig.AddRange(defaultConfig.GridColumns);
        }

        settings.Columns.Add(column =>
        {
            column.FieldName = "Status";
            column.Caption = "Status";
            column.Visible = gridConfig.Contains("Status");
            column.VisibleIndex = gridConfig.IndexOf("Status");
            column.Width = System.Web.UI.WebControls.Unit.Pixel(70);
            column.ColumnType = MVCxGridViewColumnType.DropDownEdit;
            var ddeProp = column.PropertiesEdit as DropDownEditProperties;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.FilterMode = ColumnFilterMode.Value;
            column.CellStyle.Wrap = DefaultBoolean.False;

            column.SetFilterTemplateContent(col =>
            {
                Html.DevExpress().DropDownEdit(c =>
                {
                    c.Name = "Statuses_List";
                    c.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                    c.PreRender = (sender, e) =>
                    {
                        ASPxDropDownEdit dde = (ASPxDropDownEdit)sender;
                        var values = PolicyTracker.Utilities.DevExUtils.GetListBoxValuesFromFilterExpression((GridViewModel)Model, "Status");
                        dde.Text = values;
                    };

                    c.SetDropDownWindowTemplateContent(set =>
                    {
                        @Html.DevExpress().ListBox(uwLBSettings =>
                        {
                            uwLBSettings.Name = "Statuses";
                            uwLBSettings.Width = System.Web.UI.WebControls.Unit.Pixel(200);
                            uwLBSettings.Height = 290;
                            uwLBSettings.Properties.SelectionMode = ListEditSelectionMode.CheckColumn;
                            uwLBSettings.Properties.ValueField = "DisplayText";
                            uwLBSettings.Properties.ValueType = typeof(string);
                            uwLBSettings.Properties.TextField = "DisplayText";
                            //uwLBSettings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s,e) { ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'Statuses', 'Status') }";
                            uwLBSettings.PreRender = (sender, e) =>
                            {
                                ASPxListBox listBox = (ASPxListBox)sender;
                                var values = PolicyTracker.Utilities.DevExUtils.GetListBoxValuesFromFilterExpression((GridViewModel)Model, "Status").Split(',');
                                if (values.Length > 0)
                                {
                                    foreach (ListEditItem item in listBox.Items)
                                        if (values.Contains(item.Text)) item.Selected = true;
                                };
                            };
                        }).BindList(PolicyTracker.DomainModel.Framework.StringEnum.GetAll<PolicyTracker.DomainModel.Policy.RiskStatus>()).GetHtml();
                        ViewContext.Writer.Write("<div style=\"padding: 6px; height: 40px; background-color:rgb(179, 176, 176);;\">");
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "StatusListClose";
                            buttonSettings.Text = "Close";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.ClientSideEvents.Click = "function(s, e){ Statuses_List.HideDropDown(); }";
                        }
                        ).Render();
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "StatusListClear";
                            buttonSettings.Text = "Clear";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.Style.Add("margin-right", "5px");
                            buttonSettings.ClientSideEvents.Click = "function(s, e){ Statuses.UnselectAll(); ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'Statuses', 'Status') }";
                        }
                        ).Render();
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "StatusListApply";
                            buttonSettings.Text = "Apply";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.Style.Add("margin-right", "5px");
                            buttonSettings.ClientSideEvents.Click = "function(s, e){ ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'Statuses', 'Status') }";
                        }
                        ).Render();
                        ViewContext.Writer.Write("</div>");
                    });
                }).Render();
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "ImageRightId";
            c.Caption = "ImageRightId";
            c.Width = System.Web.UI.WebControls.Unit.Pixel(70);
            c.Visible = gridConfig.Contains("ImageRightId");
            c.VisibleIndex = gridConfig.IndexOf("ImageRightId");
        });
        settings.Columns.Add(c =>
        {
            c.Width = System.Web.UI.WebControls.Unit.Pixel(150);
            c.FieldName = "Name";
            c.Caption = "Named Insured";
            c.Visible = gridConfig.Contains("Name");
            c.VisibleIndex = gridConfig.IndexOf("Name");
            //c.CellStyle.Wrap = DefaultBoolean.False;
        });
        //settings.Columns.Add(column =>
        //{
        //    column.FieldName = "UnderwriterId";
        //    column.Caption = "UW";
        //    column.Width = System.Web.UI.WebControls.Unit.Pixel(150);
        //    column.ColumnType = MVCxGridViewColumnType.ComboBox;
        //    var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
        //    comboBoxProperties.DataSource = ServiceLocator.SecuritySvc.GetUsers();
        //    comboBoxProperties.TextField = "Name";
        //    comboBoxProperties.ValueField = "UserId";
        //    comboBoxProperties.ValueType = typeof(int);
        //    comboBoxProperties.DropDownStyle = DropDownStyle.DropDown;
        //});

        settings.Columns.Add(column =>
        {
            column.FieldName = "UW";
            column.Caption = "Underwriter";
            column.Visible = gridConfig.Contains("UW");
            column.VisibleIndex = gridConfig.IndexOf("UW");
            column.Width = System.Web.UI.WebControls.Unit.Pixel(100);
            column.ColumnType = MVCxGridViewColumnType.DropDownEdit;
            var ddeProp = column.PropertiesEdit as DropDownEditProperties;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.FilterMode = ColumnFilterMode.Value;

            column.SetFilterTemplateContent(col =>
            {
                Html.DevExpress().DropDownEdit(c =>
                {
                    c.Name = "WLUnderwriterIds_List";
                    c.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                    c.PreRender = (sender, e) =>
                    {
                        ASPxDropDownEdit dde = (ASPxDropDownEdit)sender;
                        var values = PolicyTracker.Utilities.DevExUtils.GetListBoxValuesFromFilterExpression((GridViewModel)Model, "UW");
                        dde.Text = values;
                    };

                    c.SetDropDownWindowTemplateContent(set =>
                    {
                        @Html.DevExpress().ListBox(uwLBSettings =>
                        {
                            uwLBSettings.Name = "WLUnderwriterIds";
                            uwLBSettings.Width = System.Web.UI.WebControls.Unit.Pixel(200);
                            uwLBSettings.Height = 350;
                            uwLBSettings.Properties.SelectionMode = ListEditSelectionMode.CheckColumn;
                            uwLBSettings.Properties.ValueField = "Name";
                            uwLBSettings.Properties.ValueType = typeof(string);
                            uwLBSettings.Properties.TextField = "Name";
                            //uwLBSettings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s,e) { ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'WLUnderwriterIds', 'UW') }";
                            uwLBSettings.PreRender = (sender, e) =>
                            {
                                ASPxListBox listBox = (ASPxListBox)sender;
                                var values = PolicyTracker.Utilities.DevExUtils.GetListBoxValuesFromFilterExpression((GridViewModel)Model, "UW").Split(',');
                                if (values.Length > 0)
                                {
                                    foreach (ListEditItem item in listBox.Items)
                                        if (values.Contains(item.Text)) item.Selected = true;
                                };
                            };
                        }).BindList(ViewBag.Underwriters).GetHtml();
                        ViewContext.Writer.Write("<div style=\"padding: 6px; height: 40px; background-color:rgb(179, 176, 176);\">");
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "UWListClose";
                            buttonSettings.Text = "Close";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.ClientSideEvents.Click = "function(s, e){ WLUnderwriterIds_List.HideDropDown(); }";
                        }).Render();
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "UWListClear";
                            buttonSettings.Text = "Clear";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.Style.Add("margin-right", "5px");
                            buttonSettings.ClientSideEvents.Click = "function(s, e){ WLUnderwriterIds.UnselectAll(); ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'WLUnderwriterIds', 'UW') }";
                        }).Render();
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "UWListApply";
                            buttonSettings.Text = "Apply";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.Style.Add("margin-right", "5px");
                            buttonSettings.ClientSideEvents.Click = "function(s, e){ ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'WLUnderwriterIds', 'UW') }";
                        }).Render();
                        ViewContext.Writer.Write("</div>");
                    });
                }).Render();
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "UA";
            column.Caption = "UA";
            column.Visible = gridConfig.Contains("UA");
            column.VisibleIndex = gridConfig.IndexOf("UA");
            column.Width = System.Web.UI.WebControls.Unit.Pixel(90);
            column.ColumnType = MVCxGridViewColumnType.DropDownEdit;
            var ddeProp = column.PropertiesEdit as DropDownEditProperties;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.FilterMode = ColumnFilterMode.Value;

            column.SetFilterTemplateContent(col =>
            {
                Html.DevExpress().DropDownEdit(c =>
                {
                    c.Name = "UnderwriterAssistantIds_List";
                    c.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                    c.PreRender = (sender, e) =>
                    {
                        ASPxDropDownEdit dde = (ASPxDropDownEdit)sender;
                        var values = PolicyTracker.Utilities.DevExUtils.GetListBoxValuesFromFilterExpression((GridViewModel)Model, "UA");
                        dde.Text = values;
                    };

                    c.SetDropDownWindowTemplateContent(set =>
                    {
                        @Html.DevExpress().ListBox(uaLBSettings =>
                        {
                            uaLBSettings.Name = "UnderwriterAssistantIds";
                            uaLBSettings.Width = System.Web.UI.WebControls.Unit.Pixel(200);
                            uaLBSettings.Height = 350;
                            uaLBSettings.Properties.SelectionMode = ListEditSelectionMode.CheckColumn;
                            uaLBSettings.Properties.ValueField = "Name";
                            uaLBSettings.Properties.ValueType = typeof(string);
                            uaLBSettings.Properties.TextField = "Name";
                            //uaLBSettings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s,e) { ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'UnderwriterAssistantIds', 'UA') }";
                            uaLBSettings.PreRender = (sender, e) =>
                            {
                                ASPxListBox listBox = (ASPxListBox)sender;
                                var values = PolicyTracker.Utilities.DevExUtils.GetListBoxValuesFromFilterExpression((GridViewModel)Model, "UA").Split(',');
                                if (values.Length > 0)
                                {
                                    foreach (ListEditItem item in listBox.Items)
                                        if (values.Contains(item.Text)) item.Selected = true;
                                };
                            };
                        }).BindList(ViewBag.Underwriters).GetHtml();
                        ViewContext.Writer.Write("<div style=\"padding: 6px; height: 40px; background-color:rgb(179, 176, 176);;\">");
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "UAListClose";
                            buttonSettings.Text = "Close";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.ClientSideEvents.Click = "function(s, e){ UnderwriterAssistantIds_List.HideDropDown(); }";
                        }).Render();
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "UAListClear";
                            buttonSettings.Text = "Clear";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.Style.Add("margin-right", "5px");
                            buttonSettings.ClientSideEvents.Click = "function(s, e){ UnderwriterAssistantIds.UnselectAll(); ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'UnderwriterAssistantIds', 'UA') }";
                        }).Render();
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "UAListApply";
                            buttonSettings.Text = "Apply";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.Style.Add("margin-right", "5px");
                            buttonSettings.ClientSideEvents.Click = "function(s, e){ ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'UnderwriterAssistantIds', 'UA') }";
                        }).Render();
                        ViewContext.Writer.Write("</div>");
                    });
                }).Render();
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "AgencyName";
            column.Caption = "Agency Name";
            column.Visible = gridConfig.Contains("AgencyName");
            column.VisibleIndex = gridConfig.IndexOf("AgencyName");
            column.Width = System.Web.UI.WebControls.Unit.Pixel(180);
            //c.CellStyle.Wrap = DefaultBoolean.False;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "AgencyID";
            column.Caption = "Broker";
            column.Visible = gridConfig.Contains("AgencyID");
            column.VisibleIndex = gridConfig.IndexOf("AgencyID");
            column.Width = System.Web.UI.WebControls.Unit.Pixel(50);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "EffectiveDate";
            column.Caption = "Effective Date";
            column.Visible = gridConfig.Contains("EffectiveDate");
            column.VisibleIndex = gridConfig.IndexOf("EffectiveDate");
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.PropertiesEdit.DisplayFormatString = "d";
            column.Width = System.Web.UI.WebControls.Unit.Pixel(80);

            var dateEditSettings = column.PropertiesEdit as DateEditProperties;

            dateEditSettings.UseMaskBehavior = true;
            dateEditSettings.EditFormat = EditFormat.Custom;
            dateEditSettings.EditFormatString = "MM/dd/yyyy";
            dateEditSettings.CalendarProperties.ShowClearButton = true;
            dateEditSettings.NullDisplayText = "";
            dateEditSettings.NullText = "";
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "ExpirationDate";
            column.Caption = "Expiration Date";
            column.Visible = gridConfig.Contains("ExpirationDate");
            column.VisibleIndex = gridConfig.IndexOf("ExpirationDate");
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.PropertiesEdit.DisplayFormatString = "d";
            column.Width = System.Web.UI.WebControls.Unit.Pixel(80);

            var dateEditSettings = column.PropertiesEdit as DateEditProperties;

            dateEditSettings.UseMaskBehavior = true;
            dateEditSettings.EditFormat = EditFormat.Custom;
            dateEditSettings.EditFormatString = "MM/dd/yyyy";
            dateEditSettings.CalendarProperties.ShowClearButton = true;
            dateEditSettings.NullDisplayText = "";
            dateEditSettings.NullText = "";
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "Branch";
            column.Caption = "Branch";
            column.Visible = gridConfig.Contains("Branch");
            column.VisibleIndex = gridConfig.IndexOf("Branch");
            column.Width = System.Web.UI.WebControls.Unit.Pixel(40);
            column.ColumnType = MVCxGridViewColumnType.DropDownEdit;
            var ddeProp = column.PropertiesEdit as DropDownEditProperties;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.FilterMode = ColumnFilterMode.Value;

            column.SetFilterTemplateContent(col =>
            {
                Html.DevExpress().DropDownEdit(c =>
                {
                    c.Name = "WLBranches_List";
                    c.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                    c.PreRender = (sender, e) =>
                    {
                        ASPxDropDownEdit dde = (ASPxDropDownEdit)sender;
                        var values = PolicyTracker.Utilities.DevExUtils.GetListBoxValuesFromFilterExpression((GridViewModel)Model, "Branch");
                        dde.Text = values;
                    };

                    c.SetDropDownWindowTemplateContent(set =>
                    {
                        @Html.DevExpress().ListBox(uwLBSettings =>
                        {
                            uwLBSettings.Name = "WLBranches";
                            uwLBSettings.Width = System.Web.UI.WebControls.Unit.Pixel(200);
                            uwLBSettings.Height = 150;
                            uwLBSettings.Properties.SelectionMode = ListEditSelectionMode.CheckColumn;
                            uwLBSettings.Properties.ValueField = "Value";
                            uwLBSettings.Properties.ValueType = typeof(string);
                            uwLBSettings.Properties.TextField = "DisplayText";
                            //uwLBSettings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s,e) { ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'WLBranches', 'Branch') }";
                            uwLBSettings.PreRender = (sender, e) =>
                            {
                                ASPxListBox listBox = (ASPxListBox)sender;
                                var values = PolicyTracker.Utilities.DevExUtils.GetListBoxValuesFromFilterExpression((GridViewModel)Model, "Branch").Split(',');
                                if (values.Length > 0)
                                {
                                    foreach (ListEditItem item in listBox.Items)
                                        if (values.Contains(item.Value)) item.Selected = true;
                                };
                            };
                        }).BindList(PolicyTracker.DomainModel.Framework.StringEnum.GetAll<PolicyTracker.DomainModel.Common.Branch>()).GetHtml();
                        ViewContext.Writer.Write("<div style=\"padding: 6px; height: 40px; background-color:rgb(179, 176, 176);\">");
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "BranchListClose";
                            buttonSettings.Text = "Close";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.ClientSideEvents.Click = "function(s, e){ WLBranches_List.HideDropDown(); }";
                        }).Render();
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "BranchListClear";
                            buttonSettings.Text = "Clear";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.Style.Add("margin-right", "5px");
                            buttonSettings.ClientSideEvents.Click = "function(s,e) { WLBranches.UnselectAll(); ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'WLBranches', 'Branch') }";
                        }).Render();
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "BranchListApply";
                            buttonSettings.Text = "Apply";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.Style.Add("margin-right", "5px");
                            buttonSettings.ClientSideEvents.Click = "function(s,e) { ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'WLBranches', 'Branch') }";
                        }).Render();
                        ViewContext.Writer.Write("</div>");
                    });
                }).Render();
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "ProductLine";
            column.Caption = "Product Line";
            column.Visible = gridConfig.Contains("ProductLine");
            column.VisibleIndex = gridConfig.IndexOf("ProductLine");
            column.Width = System.Web.UI.WebControls.Unit.Pixel(100);
            column.ColumnType = MVCxGridViewColumnType.DropDownEdit;
            var ddeProp = column.PropertiesEdit as DropDownEditProperties;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.FilterMode = ColumnFilterMode.DisplayText;
            column.CellStyle.Wrap = DefaultBoolean.False;

            column.SetFilterTemplateContent(col =>
            {
                Html.DevExpress().DropDownEdit(c =>
                {
                    c.Name = "WLProductLines_List";
                    c.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                    c.PreRender = (sender, e) =>
                    {
                        ASPxDropDownEdit dde = (ASPxDropDownEdit)sender;
                        var values = PolicyTracker.Utilities.DevExUtils.GetListBoxValuesFromFilterExpression((GridViewModel)Model, "ProductLine");
                        dde.Text = values;
                    };

                    c.SetDropDownWindowTemplateContent(set =>
                    {
                        @Html.DevExpress().ListBox(uwLBSettings =>
                        {
                            uwLBSettings.Name = "WLProductLines";
                            uwLBSettings.Width = System.Web.UI.WebControls.Unit.Pixel(200);
                            uwLBSettings.Height = 300;
                            uwLBSettings.Properties.SelectionMode = ListEditSelectionMode.CheckColumn;
                            uwLBSettings.Properties.ValueField = "Name";
                            uwLBSettings.Properties.ValueType = typeof(string);
                            uwLBSettings.Properties.TextField = "Name";
                            //uwLBSettings.Properties.ClientSideEvents.SelectedIndexChanged = "function(s,e) { ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'WLProductLines', 'ProductLine') }";
                            uwLBSettings.PreRender = (sender, e) =>
                            {
                                ASPxListBox listBox = (ASPxListBox)sender;
                                var values = PolicyTracker.Utilities.DevExUtils.GetListBoxValuesFromFilterExpression((GridViewModel)Model, "ProductLine").Split(',');
                                if (values.Length > 0)
                                {
                                    foreach (ListEditItem item in listBox.Items)
                                        if (values.Contains(item.Value)) item.Selected = true;
                                };
                            };
                        }).BindList(ServiceLocator.PolicySvc.GetProductLines()).GetHtml();
                        ViewContext.Writer.Write("<div style=\"padding: 6px; height: 40px; background-color:rgb(179, 176, 176);;\">");
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "ProductLineListClose";
                            buttonSettings.Text = "Close";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.ClientSideEvents.Click = "function(s, e){ WLProductLines_List.HideDropDown(); }";
                        }).Render();
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "ProductLineListClear";
                            buttonSettings.Text = "Clear";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.Style.Add("margin-right", "5px");
                            buttonSettings.ClientSideEvents.Click = "function(s,e) { WLProductLines.UnselectAll(); ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'WLProductLines', 'ProductLine') }";
                        }).Render();
                        @Html.DevExpress().Button(buttonSettings =>
                        {
                            buttonSettings.Name = "ProductLineListApply";
                            buttonSettings.Text = "Apply";
                            buttonSettings.Style.Add("float", "right");
                            buttonSettings.Style.Add("margin-right", "5px");
                            buttonSettings.ClientSideEvents.Click = "function(s,e) { ora.DX.DD_Edit.GridListBox.IndexChange('WorkingListGrid', 'WLProductLines', 'ProductLine') }";
                        }).Render();
                        ViewContext.Writer.Write("</div>");
                    });
                }).Render();
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "PolicyNumber";
            column.Caption = "Policy #";
            column.Visible = gridConfig.Contains("PolicyNumber");
            column.VisibleIndex = gridConfig.IndexOf("PolicyNumber");
            column.Width = System.Web.UI.WebControls.Unit.Pixel(85);
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "AnnualizedPremium";
            column.Caption = "Annual Premium";
            column.Visible = gridConfig.Contains("AnnualizedPremium");
            column.VisibleIndex = gridConfig.IndexOf("AnnualizedPremium");
            column.PropertiesEdit.DisplayFormatString = "{0:C0}";
            column.Width = System.Web.UI.WebControls.Unit.Pixel(70);
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "RiskId";
            column.Caption = "Id";
            column.Visible = gridConfig.Contains("RiskId");
            column.VisibleIndex = gridConfig.IndexOf("RiskId");
            column.Width = System.Web.UI.WebControls.Unit.Pixel(55);
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "IsRenewal";
            column.Caption = "Renewal";
            column.Visible = gridConfig.Contains("IsRenewal");
            column.VisibleIndex = gridConfig.IndexOf("IsRenewal");
            column.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            column.Settings.FilterMode = ColumnFilterMode.Value;
            column.Settings.AllowAutoFilter = DefaultBoolean.True;
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
            column.Width = System.Web.UI.WebControls.Unit.Pixel(50);
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "HasNotes";
            column.Caption = "Notes";
            column.Visible = gridConfig.Contains("HasNotes");
            column.VisibleIndex = gridConfig.IndexOf("HasNotes");
            column.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            column.Settings.FilterMode = ColumnFilterMode.Value;
            column.Settings.AllowAutoFilter = DefaultBoolean.True;
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
            column.Width = System.Web.UI.WebControls.Unit.Pixel(50);

            //column.SetDataItemTemplateContent(c =>
            //{
            //    string imageUrl = new UrlHelper(HttpContext.Current.Request.RequestContext).Content("~/content/images/commentIcon.png");
            //    ViewContext.Writer.Write(String.Format("<img src=\"{0}\" />", imageUrl));
            //});
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "AppReceived";
            column.Caption = "App Rec.";
            column.Visible = gridConfig.Contains("AppReceived");
            column.VisibleIndex = gridConfig.IndexOf("AppReceived");
            column.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            column.Settings.FilterMode = ColumnFilterMode.Value;
            column.Settings.AllowAutoFilter = DefaultBoolean.True;
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
            column.Width = System.Web.UI.WebControls.Unit.Pixel(50);
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "CreatedDate";
            column.Caption = "Created On";
            column.Visible = gridConfig.Contains("CreatedDate");
            column.VisibleIndex = gridConfig.IndexOf("CreatedDate");
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.PropertiesEdit.DisplayFormatString = "d";
            column.Width = System.Web.UI.WebControls.Unit.Pixel(80);

            var dateEditSettings = column.PropertiesEdit as DateEditProperties;

            dateEditSettings.UseMaskBehavior = true;
            dateEditSettings.EditFormat = EditFormat.Custom;
            dateEditSettings.EditFormatString = "MM/dd/yyyy";
            dateEditSettings.CalendarProperties.ShowClearButton = true;
            dateEditSettings.NullDisplayText = "";
            dateEditSettings.NullText = "";
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "ProgramType";
            column.Caption = "Program Type";
            column.Visible = gridConfig.Contains("ProgramType");
            column.VisibleIndex = gridConfig.IndexOf("ProgramType");
            column.Width = System.Web.UI.WebControls.Unit.Pixel(75);
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "AgentName";
            column.Caption = "Agent";
            column.Visible = gridConfig.Contains("AgentName");
            column.VisibleIndex = gridConfig.IndexOf("AgentName");
            column.Width = System.Web.UI.WebControls.Unit.Pixel(90);
        });

        //Hidden Columns
        settings.Columns.Add("QuoteType").Visible = false;
        settings.Columns.Add("ControlNumber").Visible = false;
        settings.Columns.Add("RUW").Visible = false;
    }).BindToCustomData(Model).GetHtml());

            
            #line default
            #line hidden
        }
    }
}
#pragma warning restore 1591
